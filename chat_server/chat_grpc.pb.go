// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: chat.proto

package chat_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatserverClient is the client API for Chatserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatserverClient interface {
	CreateChat(ctx context.Context, in *CreateChatReq, opts ...grpc.CallOption) (*CreateChatResp, error)
	RecentChats(ctx context.Context, in *RecentChatsReq, opts ...grpc.CallOption) (*RecentChatsResp, error)
	JoinToChat(ctx context.Context, in *JoinToChatReq, opts ...grpc.CallOption) (*EmptyResp, error)
	RemoveMemberFromChat(ctx context.Context, in *RemoveMemberFromChatReq, opts ...grpc.CallOption) (*EmptyResp, error)
	GetChatMsgList(ctx context.Context, in *GetChatMsgListReq, opts ...grpc.CallOption) (*GetChatMsgListResp, error)
	GetMemberList(ctx context.Context, in *GetMemberListReq, opts ...grpc.CallOption) (*GetMemberListResp, error)
}

type chatserverClient struct {
	cc grpc.ClientConnInterface
}

func NewChatserverClient(cc grpc.ClientConnInterface) ChatserverClient {
	return &chatserverClient{cc}
}

func (c *chatserverClient) CreateChat(ctx context.Context, in *CreateChatReq, opts ...grpc.CallOption) (*CreateChatResp, error) {
	out := new(CreateChatResp)
	err := c.cc.Invoke(ctx, "/chat_server.chatserver/createChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatserverClient) RecentChats(ctx context.Context, in *RecentChatsReq, opts ...grpc.CallOption) (*RecentChatsResp, error) {
	out := new(RecentChatsResp)
	err := c.cc.Invoke(ctx, "/chat_server.chatserver/recentChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatserverClient) JoinToChat(ctx context.Context, in *JoinToChatReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/chat_server.chatserver/joinToChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatserverClient) RemoveMemberFromChat(ctx context.Context, in *RemoveMemberFromChatReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/chat_server.chatserver/removeMemberFromChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatserverClient) GetChatMsgList(ctx context.Context, in *GetChatMsgListReq, opts ...grpc.CallOption) (*GetChatMsgListResp, error) {
	out := new(GetChatMsgListResp)
	err := c.cc.Invoke(ctx, "/chat_server.chatserver/getChatMsgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatserverClient) GetMemberList(ctx context.Context, in *GetMemberListReq, opts ...grpc.CallOption) (*GetMemberListResp, error) {
	out := new(GetMemberListResp)
	err := c.cc.Invoke(ctx, "/chat_server.chatserver/getMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatserverServer is the server API for Chatserver service.
// All implementations must embed UnimplementedChatserverServer
// for forward compatibility
type ChatserverServer interface {
	CreateChat(context.Context, *CreateChatReq) (*CreateChatResp, error)
	RecentChats(context.Context, *RecentChatsReq) (*RecentChatsResp, error)
	JoinToChat(context.Context, *JoinToChatReq) (*EmptyResp, error)
	RemoveMemberFromChat(context.Context, *RemoveMemberFromChatReq) (*EmptyResp, error)
	GetChatMsgList(context.Context, *GetChatMsgListReq) (*GetChatMsgListResp, error)
	GetMemberList(context.Context, *GetMemberListReq) (*GetMemberListResp, error)
	mustEmbedUnimplementedChatserverServer()
}

// UnimplementedChatserverServer must be embedded to have forward compatible implementations.
type UnimplementedChatserverServer struct {
}

func (UnimplementedChatserverServer) CreateChat(context.Context, *CreateChatReq) (*CreateChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatserverServer) RecentChats(context.Context, *RecentChatsReq) (*RecentChatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentChats not implemented")
}
func (UnimplementedChatserverServer) JoinToChat(context.Context, *JoinToChatReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinToChat not implemented")
}
func (UnimplementedChatserverServer) RemoveMemberFromChat(context.Context, *RemoveMemberFromChatReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberFromChat not implemented")
}
func (UnimplementedChatserverServer) GetChatMsgList(context.Context, *GetChatMsgListReq) (*GetChatMsgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMsgList not implemented")
}
func (UnimplementedChatserverServer) GetMemberList(context.Context, *GetMemberListReq) (*GetMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberList not implemented")
}
func (UnimplementedChatserverServer) mustEmbedUnimplementedChatserverServer() {}

// UnsafeChatserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatserverServer will
// result in compilation errors.
type UnsafeChatserverServer interface {
	mustEmbedUnimplementedChatserverServer()
}

func RegisterChatserverServer(s grpc.ServiceRegistrar, srv ChatserverServer) {
	s.RegisterService(&Chatserver_ServiceDesc, srv)
}

func _Chatserver_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatserverServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_server.chatserver/createChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatserverServer).CreateChat(ctx, req.(*CreateChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatserver_RecentChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentChatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatserverServer).RecentChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_server.chatserver/recentChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatserverServer).RecentChats(ctx, req.(*RecentChatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatserver_JoinToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatserverServer).JoinToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_server.chatserver/joinToChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatserverServer).JoinToChat(ctx, req.(*JoinToChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatserver_RemoveMemberFromChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberFromChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatserverServer).RemoveMemberFromChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_server.chatserver/removeMemberFromChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatserverServer).RemoveMemberFromChat(ctx, req.(*RemoveMemberFromChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatserver_GetChatMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMsgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatserverServer).GetChatMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_server.chatserver/getChatMsgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatserverServer).GetChatMsgList(ctx, req.(*GetChatMsgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatserver_GetMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatserverServer).GetMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_server.chatserver/getMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatserverServer).GetMemberList(ctx, req.(*GetMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chatserver_ServiceDesc is the grpc.ServiceDesc for Chatserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_server.chatserver",
	HandlerType: (*ChatserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createChat",
			Handler:    _Chatserver_CreateChat_Handler,
		},
		{
			MethodName: "recentChats",
			Handler:    _Chatserver_RecentChats_Handler,
		},
		{
			MethodName: "joinToChat",
			Handler:    _Chatserver_JoinToChat_Handler,
		},
		{
			MethodName: "removeMemberFromChat",
			Handler:    _Chatserver_RemoveMemberFromChat_Handler,
		},
		{
			MethodName: "getChatMsgList",
			Handler:    _Chatserver_GetChatMsgList_Handler,
		},
		{
			MethodName: "getMemberList",
			Handler:    _Chatserver_GetMemberList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
