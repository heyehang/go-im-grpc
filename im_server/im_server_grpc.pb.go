// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: im_server.proto

package im_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IMServerClient is the client API for IMServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMServerClient interface {
	SnedMsg(ctx context.Context, in *SnedMsgReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type iMServerClient struct {
	cc grpc.ClientConnInterface
}

func NewIMServerClient(cc grpc.ClientConnInterface) IMServerClient {
	return &iMServerClient{cc}
}

func (c *iMServerClient) SnedMsg(ctx context.Context, in *SnedMsgReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/im_server.IMServer/snedMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMServerServer is the server API for IMServer service.
// All implementations must embed UnimplementedIMServerServer
// for forward compatibility
type IMServerServer interface {
	SnedMsg(context.Context, *SnedMsgReq) (*EmptyResp, error)
	mustEmbedUnimplementedIMServerServer()
}

// UnimplementedIMServerServer must be embedded to have forward compatible implementations.
type UnimplementedIMServerServer struct {
}

func (UnimplementedIMServerServer) SnedMsg(context.Context, *SnedMsgReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnedMsg not implemented")
}
func (UnimplementedIMServerServer) mustEmbedUnimplementedIMServerServer() {}

// UnsafeIMServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMServerServer will
// result in compilation errors.
type UnsafeIMServerServer interface {
	mustEmbedUnimplementedIMServerServer()
}

func RegisterIMServerServer(s grpc.ServiceRegistrar, srv IMServerServer) {
	s.RegisterService(&IMServer_ServiceDesc, srv)
}

func _IMServer_SnedMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnedMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServerServer).SnedMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im_server.IMServer/snedMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServerServer).SnedMsg(ctx, req.(*SnedMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IMServer_ServiceDesc is the grpc.ServiceDesc for IMServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IMServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im_server.IMServer",
	HandlerType: (*IMServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "snedMsg",
			Handler:    _IMServer_SnedMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im_server.proto",
}
